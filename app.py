# app.py - LINE x ClickUp Integration (‡∏â‡∏ö‡∏±‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå)
from flask import Flask, request, jsonify, render_template_string
from linebot import LineBotApi, WebhookHandler
from linebot.models import TextSendMessage
from linebot.exceptions import LineBotApiError
import sqlite3
import re
import json
import requests
import os
from datetime import datetime

# ============ CONFIG ============
LINE_CHANNEL_ACCESS_TOKEN = os.environ.get("LINE_CHANNEL_ACCESS_TOKEN", "3ZVjgFTiTSSfcPrrOWepkSER5JuUeemSH8V2niYLY+jGumWEWX7ftN56ZcxWMmCpQcynRyTvZqiGAlCSLP8sbCLqZbrzIFUTtetDwVdaaarmN+nDnMjU5TOrmFecDRZROIUYPNMhavx0yC5FJGR6xgdB04t89/1O/w1cDnyilFU=")
LINE_CHANNEL_SECRET = os.environ.get("LINE_CHANNEL_SECRET", "a22f0cbb61b9659cbecebbd8bedd6431")
CLICKUP_API_TOKEN = os.environ.get("CLICKUP_API_TOKEN", "pk_696759_N61E72DVCLJ2JGT6RY7SX9QOL8SK453R")

CLICKUP_LIST_ID = os.environ.get("CLICKUP_LIST_ID", "")
CLICKUP_DROPDOWN_FIELD_ID = os.environ.get("CLICKUP_DROPDOWN_FIELD_ID", "")

line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)
app = Flask(__name__)

# ============ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ============
STATUS_MESSAGES = {
    "OPEN": "üì• ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞",
    "‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß": "üìÇ ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞",
    "‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ä‡πá‡∏Ñ‡πÑ‡∏ü‡∏•‡πå": "üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞",
    "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡πÑ‡∏ü‡∏•‡πå": "‚öôÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞",
    "‡∏£‡∏≠‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô": "üí∞ ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞",
    "‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå": "üñ®Ô∏è ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞",
    "‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï": "üè≠ ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏Ñ‡πà‡∏∞",
    "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏±‡∏î‡∏™‡πà‡∏á": "üì¶ ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞",
    "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß": "‚úÖ ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ô‡∏∞‡∏Ñ‡∏∞"
}

# ============ DATABASE ============
def get_db_connection():
    conn = sqlite3.connect("customers.db", check_same_thread=False)
    return conn

def init_db():
    conn = get_db_connection()
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS customers (
            customer_code TEXT PRIMARY KEY,
            line_user_id TEXT UNIQUE,
            display_name TEXT,
            clean_name TEXT,
            phone TEXT,
            created_at TEXT
        )
    """)
    c.execute("CREATE INDEX IF NOT EXISTS idx_clean_name ON customers(clean_name)")
    c.execute("CREATE INDEX IF NOT EXISTS idx_user_id ON customers(line_user_id)")
    conn.commit()
    conn.close()
    print("‚úÖ ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")

# ============ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ä‡∏∑‡πà‡∏≠ ============
def clean_name(name):
    if not name:
        return ""
    cleaned = re.sub(r'[^\w\s‡∏Å-‡πôa-zA-Z0-9]', '', name, flags=re.UNICODE)
    cleaned = re.sub(r'\s+', ' ', cleaned).strip()
    return cleaned.lower()

# ============ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ============
def generate_customer_code():
    conn = get_db_connection()
    c = conn.cursor()
    c.execute("SELECT COUNT(*) FROM customers")
    count = c.fetchone()[0]
    conn.close()
    return f"CUS{str(count + 1).zfill(4)}"

def save_customer(line_user_id, display_name, phone=None):
    conn = get_db_connection()
    c = conn.cursor()
    c.execute("SELECT customer_code, display_name FROM customers WHERE line_user_id=?", (line_user_id,))
    existing = c.fetchone()
    
    if existing:
        if existing[1] != display_name:
            clean_name_value = clean_name(display_name)
            c.execute("UPDATE customers SET display_name=?, clean_name=? WHERE line_user_id=?",
                     (display_name, clean_name_value, line_user_id))
            conn.commit()
            print(f"üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠ {existing[0]}")
        conn.close()
        return existing[0]
    
    customer_code = generate_customer_code()
    clean_name_value = clean_name(display_name)
    created_at = datetime.now().isoformat()
    
    c.execute("""
        INSERT INTO customers (customer_code, line_user_id, display_name, clean_name, phone, created_at)
        VALUES (?, ?, ?, ?, ?, ?)
    """, (customer_code, line_user_id, display_name, clean_name_value, phone, created_at))
    
    conn.commit()
    conn.close()
    print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: {customer_code} - {display_name}")
    return customer_code

def get_customer_by_code(customer_code):
    conn = get_db_connection()
    c = conn.cursor()
    c.execute("SELECT * FROM customers WHERE customer_code=?", (customer_code,))
    row = c.fetchone()
    conn.close()
    return row

def search_customer(keyword):
    if not keyword:
        return []
    clean_keyword = clean_name(keyword)
    conn = get_db_connection()
    c = conn.cursor()
    c.execute("""
        SELECT customer_code, display_name, clean_name, line_user_id, created_at
        FROM customers 
        WHERE clean_name LIKE ? OR customer_code LIKE ?
        ORDER BY created_at DESC
        LIMIT 50
    """, (f"%{clean_keyword}%", f"%{keyword.upper()}%"))
    rows = c.fetchall()
    conn.close()
    return rows

# ============ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï CLICKUP DROPDOWN ============
def update_clickup_dropdown(customer_code, display_name, clean_name_value):
    if not CLICKUP_LIST_ID or not CLICKUP_DROPDOWN_FIELD_ID:
        print("‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ClickUp Dropdown")
        return False
    
    headers = {
        "Authorization": CLICKUP_API_TOKEN,
        "Content-Type": "application/json"
    }
    
    option_name = f"{customer_code} - {display_name} ({clean_name_value})"
    
    try:
        response = requests.get(
            f"https://api.clickup.com/api/v2/list/{CLICKUP_LIST_ID}/field",
            headers=headers,
            timeout=10
        )
        
        if response.status_code != 200:
            print(f"‚ùå ‡∏î‡∏∂‡∏á Fields ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {response.text}")
            return False
        
        fields = response.json().get("fields", [])
        target_field = None
        
        for field in fields:
            if field["id"] == CLICKUP_DROPDOWN_FIELD_ID:
                target_field = field
                break
        
        if not target_field:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Field ID: {CLICKUP_DROPDOWN_FIELD_ID}")
            return False
        
        existing_options = target_field.get("type_config", {}).get("options", [])
        option_exists = any(opt.get("name") == option_name for opt in existing_options)
        
        if option_exists:
            print(f"‚ÑπÔ∏è ‡∏°‡∏µ '{option_name}' ‡πÅ‡∏•‡πâ‡∏ß")
            return True
        
        new_option = {"name": option_name, "color": None}
        new_options = [new_option] + existing_options
        
        update_response = requests.put(
            f"https://api.clickup.com/api/v2/list/{CLICKUP_LIST_ID}/field/{CLICKUP_DROPDOWN_FIELD_ID}",
            headers=headers,
            json={"type_config": {"options": new_options}},
            timeout=10
        )
        
        if update_response.status_code == 200:
            print(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° '{option_name}' ‡πÅ‡∏•‡πâ‡∏ß")
            return True
        else:
            print(f"‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {update_response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

# ============ HTML SEARCH PAGE ============
SEARCH_PAGE = """
<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: 'Segoe UI', Tahoma, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        .container {
            max-width: 900px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            padding: 40px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
        }
        h1 { color: #667eea; margin-bottom: 10px; font-size: 32px; }
        .subtitle { color: #666; margin-bottom: 30px; }
        input {
            width: 100%;
            padding: 18px 20px;
            border: 2px solid #e0e0e0;
            border-radius: 12px;
            font-size: 17px;
            margin-bottom: 20px;
        }
        input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.1);
        }
        .customer-card {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            padding: 20px;
            border-radius: 12px;
            margin-bottom: 15px;
            border-left: 5px solid #667eea;
            transition: all 0.3s;
        }
        .customer-card:hover {
            transform: translateX(5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        .customer-code {
            font-weight: bold;
            color: #667eea;
            font-size: 20px;
            margin-bottom: 8px;
        }
        .copy-btn {
            background: #667eea;
            color: white;
            border: none;
            padding: 8px 20px;
            border-radius: 8px;
            cursor: pointer;
            float: right;
            transition: all 0.2s;
        }
        .copy-btn:hover { 
            background: #5568d3; 
            transform: scale(1.05);
        }
        .copied { background: #28a745 !important; }
        .no-results {
            text-align: center;
            padding: 40px;
            color: #999;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</h1>
        <p class="subtitle">‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥)</p>
        <input type="text" id="searchInput" placeholder="‡πÄ‡∏ä‡πà‡∏ô: ‡∏™‡∏°‡∏ä‡∏≤‡∏¢, CUS0001" autofocus>
        <div id="results"></div>
    </div>
    <script>
        const searchInput = document.getElementById('searchInput');
        const resultsDiv = document.getElementById('results');
        let debounceTimer;

        searchInput.addEventListener('input', function() {
            clearTimeout(debounceTimer);
            const keyword = this.value.trim();
            
            if (keyword.length < 2) {
                resultsDiv.innerHTML = '';
                return;
            }

            resultsDiv.innerHTML = '<p style="text-align:center;color:#667eea;padding:20px;">üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...</p>';

            debounceTimer = setTimeout(() => {
                fetch('/api/search?q=' + encodeURIComponent(keyword))
                    .then(res => res.json())
                    .then(data => {
                        if (data.results.length === 0) {
                            resultsDiv.innerHTML = '<div class="no-results">üòî ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>';
                            return;
                        }
                        let html = '';
                        data.results.forEach(customer => {
                            html += '<div class="customer-card">';
                            html += '<div class="customer-code">' + customer.code;
                            html += '<button class="copy-btn" onclick="copyCode(\'' + customer.code + '\', this)">üìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å</button>';
                            html += '</div>';
                            html += '<div>üìù ' + customer.display_name + '</div>';
                            html += '<div style="color:#999;font-size:14px;">üîé ' + customer.clean_name + '</div>';
                            html += '</div>';
                        });
                        resultsDiv.innerHTML = html;
                    })
                    .catch(() => {
                        resultsDiv.innerHTML = '<div class="no-results">‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</div>';
                    });
            }, 300);
        });

        function copyCode(code, btn) {
            navigator.clipboard.writeText(code).then(() => {
                btn.textContent = '‚úì ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß';
                btn.classList.add('copied');
                setTimeout(() => {
                    btn.textContent = 'üìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å';
                    btn.classList.remove('copied');
                }, 2000);
            }).catch(() => {
                alert('‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            });
        }
    </script>
</body>
</html>
"""

# ============ ROUTES ============
@app.route("/")
def index():
    return """
    <html><head><meta charset="UTF-8"><title>LINE x ClickUp</title>
    <style>
        body { font-family: Arial; padding: 40px; background: #f5f5f5; text-align: center; }
        h1 { color: #667eea; font-size: 36px; }
        .status { color: #28a745; font-weight: bold; font-size: 18px; margin: 20px 0; }
        a { 
            display: inline-block; 
            margin: 10px; 
            padding: 15px 30px; 
            background: #667eea; 
            color: white; 
            text-decoration: none; 
            border-radius: 10px; 
            font-size: 16px;
            transition: all 0.3s;
        }
        a:hover { 
            background: #5568d3; 
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
    </style>
    </head><body>
    <h1>üöÄ LINE x ClickUp Integration</h1>
    <p class="status">‚úÖ Server ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥</p>
    <div>
        <a href="/search">üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</a>
        <a href="/customers">üìã ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</a>
    </div>
    </body></html>
    """

@app.route("/search")
def search_page():
    return render_template_string(SEARCH_PAGE)

@app.route("/api/search")
def search_api():
    keyword = request.args.get("q", "")
    results = search_customer(keyword)
    return jsonify({
        "results": [
            {
                "code": row[0], 
                "display_name": row[1], 
                "clean_name": row[2], 
                "user_id": row[3]
            }
            for row in results
        ]
    })

@app.route("/customers")
def list_customers():
    conn = get_db_connection()
    c = conn.cursor()
    c.execute("SELECT customer_code, display_name, clean_name, created_at FROM customers ORDER BY created_at DESC")
    rows = c.fetchall()
    conn.close()
    
    html = """<html><head><meta charset="UTF-8"><title>‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</title>
    <style>
        body { font-family: Arial; padding: 20px; background: #f5f5f5; }
        h1 { color: #667eea; }
        table { width: 100%; border-collapse: collapse; background: white; margin-top: 20px; }
        th, td { padding: 15px; text-align: left; border-bottom: 1px solid #ddd; }
        th { background: #667eea; color: white; }
        tr:hover { background: #f5f5f5; }
        .code { font-weight: bold; color: #667eea; }
        a { color: #667eea; text-decoration: none; margin-right: 20px; }
        a:hover { text-decoration: underline; }
    </style></head><body>
    <h1>üìã ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h1>
    <p><a href="/">‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å</a> <a href="/search">üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</a></p>
    <p><strong>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:</strong> """ + str(len(rows)) + """ ‡∏Ñ‡∏ô</p>
    <table>
    <tr><th>‡∏£‡∏´‡∏±‡∏™‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</th><th>‡∏ä‡∏∑‡πà‡∏≠</th><th>‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</th><th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á</th></tr>"""
    
    for row in rows:
        date_str = row[3][:10] if row[3] else "-"
        html += f"<tr><td class='code'>{row[0]}</td><td>{row[1]}</td><td>{row[2]}</td><td>{date_str}</td></tr>"
    
    html += "</table></body></html>"
    return html

# ============ LINE WEBHOOK ============
@app.route("/line_webhook", methods=["POST"])
def line_webhook():
    body = request.get_data(as_text=True)
    try:
        events = json.loads(body).get("events", [])
        for event in events:
            if event["type"] == "message" and event["message"]["type"] == "text":
                user_id = event["source"]["userId"]
                try:
                    profile = line_bot_api.get_profile(user_id)
                    display_name = profile.display_name
                    clean_name_value = clean_name(display_name)
                    customer_code = save_customer(user_id, display_name)
                    
                    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ClickUp Dropdown (‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß)
                    if CLICKUP_LIST_ID and CLICKUP_DROPDOWN_FIELD_ID:
                        update_clickup_dropdown(customer_code, display_name, clean_name_value)
                    
                    # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
                    reply_msg = f"""‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢

üÜî ‡∏£‡∏´‡∏±‡∏™‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {customer_code}
üìù ‡∏ä‡∏∑‡πà‡∏≠: {display_name}

‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏£‡∏≤‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡πà‡∏∞ üíö"""
                    
                    line_bot_api.reply_message(
                        event["replyToken"], 
                        TextSendMessage(text=reply_msg)
                    )
                    print(f"‚úÖ {customer_code} - {display_name}")
                    
                except LineBotApiError as e:
                    print(f"‚ùå LINE API Error: {e}")
                except Exception as e:
                    print(f"‚ùå Error: {e}")
        
        return "OK"
    except Exception as e:
        print(f"‚ùå LINE Webhook Error: {e}")
        return "Error", 500

# ============ CLICKUP WEBHOOK ============
@app.route("/clickup_webhook", methods=["POST"])
def clickup_webhook():
    try:
        data = request.json
        
        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô task status update
        if data.get("event") != "taskStatusUpdated":
            return "OK"
        
        task_id = data.get("task_id")
        
        # ‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà
        new_status = None
        for item in data.get("history_items", []):
            if item.get("field") == "status":
                new_status = item.get("after", {}).get("status")
                break
        
        if not new_status:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞")
            return "OK"
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Task ‡∏à‡∏≤‡∏Å ClickUp
        headers = {"Authorization": CLICKUP_API_TOKEN}
        task_response = requests.get(
            f"https://api.clickup.com/api/v2/task/{task_id}",
            headers=headers,
            timeout=10
        )
        
        if task_response.status_code != 200:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Task: {task_response.status_code}")
            return "OK"
        
        task_data = task_response.json()
        task_name = task_data.get("name", "")
        
        # ‡∏´‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å Custom Field "‡∏£‡∏´‡∏±‡∏™‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"
        customer_code = None
        for field in task_data.get("custom_fields", []):
            field_name = field.get("name", "")
            if field_name in ["‡∏£‡∏´‡∏±‡∏™‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤", "CUSTOMER_CODE", "Customer Code"]:
                value = field.get("value")
                
                # Dropdown ‡∏à‡∏∞‡∏™‡πà‡∏á‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô dict ‡∏´‡∏£‡∏∑‡∏≠ string
                if isinstance(value, dict):
                    customer_code = value.get("name", "").split(" - ")[0].strip()
                elif isinstance(value, str):
                    customer_code = value.split(" - ")[0].strip()
                
                break
        
        if not customer_code:
            print(f"‚ö†Ô∏è Task {task_id} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤")
            return "OK"
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        customer = get_customer_by_code(customer_code)
        
        if not customer:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™: {customer_code}")
            return "OK"
        
        # customer = (customer_code, line_user_id, display_name, clean_name, phone, created_at)
        line_user_id = customer[1]
        customer_name = customer[2]
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        status_text = STATUS_MESSAGES.get(new_status, f"‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ‡∏Ñ‡∏∏‡∏ì [‡∏ä‡∏∑‡πà‡∏≠] [emoji] [‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°]
        message = f"‡∏Ñ‡∏∏‡∏ì {customer_name} {status_text}"
        
        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° LINE
        try:
            line_bot_api.push_message(
                line_user_id, 
                TextSendMessage(text=message)
            )
            print(f"‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏∂‡∏á {customer_code} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {new_status})")
        except LineBotApiError as e:
            print(f"‚ùå ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        except Exception as e:
            print(f"‚ùå Error: {e}")
        
        return "OK"
        
    except Exception as e:
        print(f"‚ùå ClickUp Webhook Error: {e}")
        return "Error", 500

# ============ HEALTH CHECK ============
@app.route("/health")
def health():
    return jsonify({
        "status": "ok",
        "timestamp": datetime.now().isoformat()
    })

# ============ MAIN ============
if __name__ == "__main__":
    init_db()
    port = int(os.environ.get("PORT", 5000))
    print("\n" + "="*60)
    print("üöÄ LINE x ClickUp Integration Server")
    print("="*60)
    print(f"‚úÖ Server starting on port {port}")
    print(f"üìç Local: http://localhost:{port}")
    print(f"üîç Search: http://localhost:{port}/search")
    print(f"üìã Customers: http://localhost:{port}/customers")
    print("="*60 + "\n")
    
    app.run(host="0.0.0.0", port=port, debug=False)